from django.core.management.base import BaseCommand, CommandError
from django.contrib.auth import get_user_model

Author = get_user_model()


class Command(BaseCommand):
    help = (
        'Creates a superuser for a specific node '
        'with a display name and host.'
    )

    def add_arguments(self, parser):
        parser.add_argument(
            'username',
            type=str,
            help='Specifies the login username.')
        parser.add_argument(
            'password',
            type=str,
            help='Specifies the password for the superuser.')
        parser.add_argument(
            'host',
            type=str,
            help="The host URL for the node (e.g., 'http://127.0.0.1:8000').")
        parser.add_argument(
            '--email',
            type=str,
            default='',
            help='Specifies the email for the superuser.')
        parser.add_argument(
            '--display_name',
            type=str,
            default='',
            help='Specifies the display name.')

    def handle(self, *args, **options):
        username = options['username']
        password = options['password']
        host = options['host']
        email = options['email']
        display_name = options['display_name'] or username

        if not host.endswith('/'):
            host += '/'

        if Author.objects.filter(username=username).exists():
            self.stdout.write(
                self.style.WARNING(
                    f"User '{username}' already exists. Skipping."))
            return

        try:
            # Create the author object with all required fields for a superuser
            author = Author.objects.create(
                username=username,
                email=email,
                host=host,
                display_name=display_name,
                is_staff=True,
                is_superuser=True,
                is_active=True
            )
            # Use set_password to hash it correctly
            author.set_password(password)

            # The 'serial' field is generated by default via uuid.uuid4.
            # We use it to construct the canonical 'url' (FQID).
            author.url = f"{host}api/authors/{author.serial}/"
            author.save()

            self.stdout.write(
                self.style.SUCCESS(
                    f"Successfully created superuser '{username}' "
                    f"for host '{host}'"))

        except Exception as e:
            raise CommandError(f"Error creating superuser: {e}")
