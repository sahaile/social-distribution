# Generated by Django 5.2.4 on 2025-07-31 02:47

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='RemoteNode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('host', models.URLField(help_text="The base URL of the remote node (e.g., 'https://another-node.herokuapp.com/')", unique=True)),
                ('outgoing_username', models.CharField(blank=True, help_text='The username for HTTP Basic Auth to connect TO the remote node.', max_length=255)),
                ('outgoing_password', models.CharField(blank=True, help_text='The password for HTTP Basic Auth to connect TO the remote node.', max_length=255)),
                ('incoming_username', models.CharField(blank=True, help_text='The username a remote node uses to authenticate with US.', max_length=255, null=True)),
                ('incoming_password', models.CharField(blank=True, help_text='The hashed password a remote node uses to authenticate with US.', max_length=255, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this remote node connection is active.')),
            ],
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('url', models.URLField(help_text='The fully qualified ID of this author.', max_length=512, unique=True)),
                ('serial', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('host', models.URLField(help_text="URL of this author's node", max_length=500)),
                ('display_name', models.CharField(blank=True, max_length=150)),
                ('github', models.URLField(blank=True, max_length=500)),
                ('profile_image', models.URLField(blank=True, max_length=500)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('ACCEPTED', 'Accepted'), ('REJECTED', 'Rejected')], default='PENDING', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following_relationships', to=settings.AUTH_USER_MODEL, to_field='url')),
                ('following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follower_relationships', to=settings.AUTH_USER_MODEL, to_field='url')),
            ],
            options={
                'indexes': [models.Index(fields=['follower', 'status'], name='authors_fol_followe_0eeb3b_idx'), models.Index(fields=['following', 'status'], name='authors_fol_followi_41c257_idx')],
                'unique_together': {('follower', 'following')},
            },
        ),
    ]
